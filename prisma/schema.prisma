// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Status {
  PENDING
  APPROVE
  REJECT
  DONE
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role
  patient   Patient?
  doctor    Doctor?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Patient {
  id           Int             @id @default(autoincrement())
  userId       Int             @unique
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctors      PatientDoctor[]
  appointments Appointment[]
}

model Doctor {
  id           Int             @id @default(autoincrement())
  appointments Appointment[]
  patients     PatientDoctor[]
  userId       Int             @unique
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId Int?            @unique
  department   Department?     @relation(fields: [departmentId], references: [id])
}

model Department {
  id     Int      @id @default(autoincrement())
  doctor Doctor[]
}

model PatientDoctor {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([patientId, doctorId])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  dateTime  DateTime
  doctorId  Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  patientId Int      @unique
  patient   Patient  @relation(fields: [patientId], references: [id])
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
